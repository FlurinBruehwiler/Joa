@using Microsoft.Extensions.DependencyInjection
@using Joa.PluginCore
@using Joa.Step
@using JoaLauncher.Api
@using Photino.Blazor
@using Joa.Hotkey
@using Joa.Injectables
@using JoaLauncher.Api.Injectables
@using Search = Joa.Search
@using System.Web
@inject JoaManager JoaManager
@inject PhotinoBlazorApp PhotinoBlazorApp 
@implements IDisposable

<div class="searchBox">
    <svg class="searchIcon" xmlns="http://www.w3.org/2000/svg"
         viewBox="0 0 32 32" version="1.1">
        <g id="surface1">
            <path
                d="M 19 3 C 13.488281 3 9 7.488281 9 13 C 9 15.394531 9.839844 17.589844 11.25 19.3125 L 3.28125 27.28125 L 4.71875 28.71875 L 12.6875 20.75 C 14.410156 22.160156 16.605469 23 19 23 C 24.511719 23 29 18.511719 29 13 C 29 7.488281 24.511719 3 19 3 Z M 19 5 C 23.429688 5 27 8.570313 27 13 C 27 17.429688 23.429688 21 19 21 C 14.570313 21 11 17.429688 11 13 C 11 8.570313 14.570313 5 19 5 Z ">
            </path>
        </g>
    </svg>
    <input autofocus spellcheck="false" class="searchInput" type="text" value="@_input" @oninput="InputChanged" @onkeydown="HandleKeyInput">
</div>
<div class="steps cursor-default select-none">
    @foreach (var step in _steps.Reverse())
    {
        <div class="step">
            @step.Name
        </div>
    }
</div>
@for (var i = 0; i < _searchResults.Count; i++)
{
    <div class="searchResult cursor-default select-none leading-[20px]" style="@SearchResultBackgroundStyle(i)">
        <div class="searchResultIcon">
            <img class="w-[28px] h-[28px]" src="@("Icons/" + _searchResults[i].SearchResult.Icon.Replace("wwwroot\\Icons\\", ""))" alt="">
        </div>
        <div class="overflow-clip">
            <p class="searchResultTitle whitespace-nowrap">@_searchResults[i].SearchResult.Title</p>
            <p class="searchResultDescription whitespace-nowrap">@_searchResults[i].SearchResult.Description</p>
        </div>
    </div>
}

@code
{
    private string _input = string.Empty;
    private int _activeIndex;
    private List<PluginSearchResult> _searchResults = new();
    private Stack<Step> _steps = new();

    protected override void OnInitialized()
    {
        _steps.Push(new Step
        {
            Providers = GetRequiredService<PluginManager>().GlobalProviders,
            Name = "Global Step",
            Options = new StepOptions()
        });

        JoaManager.ExecuteOnUiThread = async action =>
        {
            await InvokeAsync(action);
        };
        
        base.OnInitialized();
    }
    
    private T GetRequiredService<T>()
    {
        return (T)JoaManager.CurrentScope?.ServiceProvider.GetRequiredService(typeof(T))! ?? throw new InvalidOperationException();
    }

    private async Task InputChanged(ChangeEventArgs args)
    {
        _input = args.Value?.ToString() ?? string.Empty;

        var results = await GetRequiredService<Search>().UpdateSearchResults(_steps.Peek(), _input);

        _searchResults = results;
        _activeIndex = 0;
        SearchResultsHaveChanged();
    }

    private string SearchResultBackgroundStyle(int index)
    {
        if (index == _activeIndex)
            return "background-color: var(--searchResultActiveBackground)";
        return "background-color: var(--userInputBackground)";
    }

    private async Task HandleKeyInput(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            case "ArrowDown":
                if (_activeIndex + 1 < _searchResults.Count)
                    _activeIndex++;
                break;
            case "ArrowUp":
                if (_activeIndex > 0)
                    _activeIndex--;
                break;
            case "Tab":
                if (args.ShiftKey && _steps.Count > 1)
                    _steps.Pop();
                break;
            case "Escape":
                PhotinoBlazorApp.MainWindow.SetHidden(true);
                break;
        }

        if (_searchResults.Count > 0)
        {
            foreach (var action in _searchResults[_activeIndex].SearchResult.Actions!.Where(action => action.Id == args.Key))
            {
                var newStep = await GetRequiredService<Search>().ExecuteCommand(_searchResults[_activeIndex].SearchResult, action);
                if (newStep is not null)
                    _steps.Push(newStep);
                else
                    ClearSteps();
                _input = string.Empty;
                _searchResults.Clear();
                SearchResultsHaveChanged();
                break;
            }
        }
    }

    private void SearchResultsHaveChanged()
    {
        PhotinoBlazorApp.MainWindow.SetSize(600, 90 + 50 * _searchResults.Count);
    }

    private void ClearSteps()
    {
        while (_steps.Count > 1)
        {
            _steps.Pop();
        }
    }

    public void Dispose()
    {
        JoaLogger.GetInstance().Info("disposing ui");
        _input = string.Empty;
        _searchResults = null;
        _steps = null;
    }
}
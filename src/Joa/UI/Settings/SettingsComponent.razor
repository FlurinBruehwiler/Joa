@using Joa.PluginCore
@using Joa.Settings
@using Microsoft.Extensions.DependencyInjection
@using Joa.Injectables
@inject JoaManager JoaManager

<div class="w-full h-full flex">
    <div class="bg-c-100 w-[300px] h-full flex flex-col border-c-200 border-r-[1px]">
        <div class="h-[93px] w-full"></div>
        <div class="h-full w-full flex flex-col p-[15px] gap-[6px] border-c-200 border-y-[1px]">
            @foreach (var plugin in _pluginManager.Plugins)
            {
                <button @onclick="() => _selectedPlugin = plugin" class="w-full h-[40px] @(plugin == _selectedPlugin ? "bg-c-400" : "bg-transparent") rounded-[4px] cursor-pointer text-left pl-[10px] text-white">
                    @plugin.PluginInfo.Name
                </button>
            }
        </div>
        <div class="h-[93px] w-full"></div>
    </div>
    <div class="bg-c-50 w-full h-full flex flex-col">
        <div class="w-full flex flex-col justify-between h-[193px] border-c-200 border-b-[1px] p-[35px] pb-[10px]">
            <div class="w-full text-white flex justify-between">
                <p class="text-[30px]">@_selectedPlugin.PluginInfo.Name</p>
                <Button text="Enable"></Button>
            </div>
            <div class="w-full text-white">
                <p>@_selectedPlugin.PluginInfo.Description</p>
            </div>
        </div>
        <div class="w-full h-full flex flex-col gap-[10px] p-[35px]">
            @foreach(var property in _selectedPlugin.SettingConfiguration.PropertyInstances)
            {
                <PropertyDisplay Property="property"></PropertyDisplay>
            }
        </div>
    </div>
</div>

@code
{
    private PluginManager _pluginManager;
    private PluginDefinition _selectedPlugin;
    
    protected override void OnInitialized()
    {
        if (JoaManager.CurrentScope is null)
            throw new Exception(); //Todo
        
        _pluginManager = JoaManager.CurrentScope.ServiceProvider.GetRequiredService<PluginManager>();
        var settingsManager = JoaManager.CurrentScope.ServiceProvider.GetRequiredService<SettingsManager>();
        settingsManager.SettingsChangedOutsideOfUi = () =>
        {
            InvokeAsync(StateHasChanged);
        };
        _selectedPlugin = _pluginManager.Plugins.First();
        
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        JoaLogger.GetInstance().Info(_selectedPlugin.SettingConfiguration.PropertyInstances.Count.ToString());
        
        base.OnAfterRender(firstRender);
    }
}

@using Joa.Settings
@using System.Runtime.CompilerServices
@using Microsoft.Extensions.DependencyInjection
@inject JoaManager JoaManager

@if (_propertyType == typeof(int) || _propertyType == typeof(float) || _propertyType == typeof(string))
{
    <div class="w-full h-[50px] bg-c-100 flex items-center px-[8px] justify-between text-white rounded-[4px]">
        <p>@Property.PropertyDescription.PropertyInfo.Name</p>
        <input type="text" spellCheck="false" placeholder="Search..."
               class="focus:bg-c-400 text-white h-[35px] bg-transparent border-c-200 border-[1px] rounded-[4px] px-[10px] focus:outline-none"/>
    </div>
}
else if (_propertyType == typeof(bool))
{
    <div class="w-full h-[50px] bg-c-100 flex items-center px-[8px] justify-between text-white rounded-[4px]">
        <p>@Property.PropertyDescription.PropertyInfo.Name</p>
        <label class="relative inline-flex items-center cursor-pointer">
            <input type="checkbox" checked=@Property.GetValue() @onchange="PropertyChanged" class="sr-only peer"/>
            <div
                class="w-11 h-6 bg-c-400 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-c-300"></div>
        </label>
    </div>
}
else if (Property is ListPropertyInstance listProperty)
{
    <div class="p-[8px] w-full bg-c-100  justify-between text-white rounded-[4px]">
        <div class="w-full pb-[8px] bg-c-100 flex items-center  justify-between text-white rounded-[4px]">
            <p class="font-bold">@listProperty.PropertyDescription.PropertyInfo.Name</p>
            <div class="flex gap-[8px]">
                <Button text="Add"></Button>
                <IconButton></IconButton>
            </div>
        </div>
        <div class="w-full flex flex-col gap-[5px]">
            @foreach (var item in listProperty.Items)
            {
                <div class="flex justify-between hover:bg-c-400">
                    <p>Item</p>
                    <IconButton icon="trash" color="bg-c-500"></IconButton>
                </div>
            }
        </div>
    </div>
}

@code {

    [Parameter]
    public PropertyInstance Property { get; set; }

    private Type _propertyType;
    private SettingsManager _settingsManager;

    protected override void OnInitialized()
    {
        if (JoaManager.CurrentScope is null)
            throw new Exception();
        
        _settingsManager = JoaManager.CurrentScope.ServiceProvider.GetRequiredService<SettingsManager>();
        _propertyType = Property.PropertyDescription.PropertyInfo.PropertyType;

        base.OnInitialized();
    }

    private void PropertyChanged(ChangeEventArgs args)
    {
        Property.SetValue(args.Value);
        _settingsManager.SaveSettingsToJson();
    }
}